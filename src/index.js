import './register'
import {__, component} from 'riot'
import { createDocument } from 'domino'
import curry from 'curri'

const {CSS_BY_NAME} = __.cssManager
const INPUT_ELEMENTS_SELECTOR = 'input,textarea,select,option'
const INPUT_PASSWORD_TYPE = 'password'
const VALUE_ATTRIBUTE = 'value'

/**
 * Set the value attribute of all the inputs
 * @param {HTMLElement} element - root node
 * @return {HTMLElement[]} list of the matched input elements
 */
function setUserInputAttributes(element) {
  return element.$$(INPUT_ELEMENTS_SELECTOR).map(el => {
    const value = el.type !== INPUT_PASSWORD_TYPE ? el.value : ''
    el.setAttribute(VALUE_ATTRIBUTE, value || '')

    return el
  })
}

/**
 * Create the renderer function that can produce different types of output from the DOM rendered
 * @param   {Function} renderer - rendering function
 * @param   {string} tagName - tag name of the root node
 * @param   {RiotComponentShell} componentAPI - component shell object
 * @param   {Object} props - initial props
 * @returns {*} output generated by the renderer function
 */
function createRenderer(renderer, tagName, componentAPI, props = {}) {
  // create temporary global variables
  global.document = createDocument()
  global.Node = { COMMENT_NODE: 8 }

  const root = document.createElement(tagName)
  const element = component(componentAPI)(root, props)

  //reflect input value prop to attribute
  setUserInputAttributes(element)

  const result = renderer({
    // serialize the component outer html
    html: root.outerHTML,
    // serialize all the generated css
    css: [...CSS_BY_NAME.values()].join('\n')
  })
  const dispose = () => {
    // unmount the component
    element.unmount()
    // cleanup the DOM
    // remove the old stored css
    CSS_BY_NAME.clear()
    /* eslint-disable */
    delete global.document
    delete global.Node
    /* eslint-enable */
  }

  // free the memory removing the stuff created in runtime
  dispose()

  return result
}

export default curry(createRenderer)(({html}) => html)
export const fragments = curry(createRenderer)(frags => frags)
