'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var riot = require('riot');
var curry = _interopDefault(require('curri'));
var jsDOMGlobal = _interopDefault(require('jsdom-global'));

const {addHook} = require('pirates');
const {transform} = require('@babel/core');
const {compile} = require('@riotjs/compiler');

const { CSS_BY_NAME } = riot.__.cssManager;

/**
 * Create the renderer function that can produce different types of output from the DOM rendered
 * @param   {Function} renderer - rendering function
 * @param   {string} tagName - tag name of the root node
 * @param   {RiotComponentShell} componentAPI - component shell object
 * @param   {Object} props - initial props
 * @returns {*} output generated by the renderer function
 */
function createRenderer(renderer, tagName, componentAPI, props = {}) {
  const cleanup = jsDOMGlobal();
  const root = document.createElement(tagName);
  const element = riot.component(componentAPI)(root, props);
  const result = renderer({
    // serialize the component outer html
    html: root.outerHTML,
    // serialize all the generated css
    css: [...CSS_BY_NAME.values()].join('\n')
  });
  const dispose = () => {
    // unmount the component
    element.unmount();
    // cleanup the DOM
    cleanup();
    // remove the old stored css
    CSS_BY_NAME.clear();
  };

  // free the memory removing the stuff created in runtime
  dispose();

  return result
}

var index = curry(createRenderer)(({html}) => html);
const fragments = curry(createRenderer)(frags => frags);

exports.default = index;
exports.fragments = fragments;
